@page "/room/{RoomId:guid}"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.IO
@using BlazingRoller.Client.Models

@inject NavigationManager Navigator
@inject SessionStorageService Storage
@inject IJSRuntime JSRuntime

@implements IDisposable

<div class="room-name">@Storage.Room <span class="leave-room-link">(<a href="#" @onclick:preventDefault @onclick="LeaveRoom">Leave room <i class="fas fa-sign-out-alt"></i></a>)</span></div>

<div class="row">
    <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12 webgl-column">
        <div class="webgl-content">
            <div id="unityContainer" style="width: 800px; height: 450px"></div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">
        <div class="row">
            <div class="col-6">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-dice-d20"></i></span>
                    </div>
                    <input type="text" @bind="diceExpression" class="form-control" autocomplete=""/>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Roll">Roll!</button>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-success" @onclick='() => RollCore("1D20")'><i class="fas fa-dice-d20"></i></button>
                <button type="button" class="btn btn-success" @onclick='() => RollCore("2D20")'>2x <i class="fas fa-dice-d20"></i></button>
            </div>
        </div>

        <div class="row">
            <div class="col-12">

                <div class="dice-log-container" @ref="logContainer">
                    @foreach (var log in throwLogs)
                    {
                        <div class="dice-log">
                            <span class="dice-log-name">@(log.Name): </span>
                            <span class="dice-log-text">@log.Text</span>
                            @if (log.Result is {})
                            {
                                <span class="dice-log-value"> = @log.Result</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid RoomId { get; set; }

    private static Func<string, int, string, Task> deliverThrowValueAction;

    private ElementReference logContainer;
    private string diceExpression;
    private HubConnection hubConnection;
    private List<DiceThrowLogModel> throwLogs = new List<DiceThrowLogModel>();
    private Guid? currentThrowId;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Storage.User) || string.IsNullOrEmpty(Storage.Room))
        {
            Navigator.NavigateTo($"/create/{RoomId}");
            return;
        }

        deliverThrowValueAction = ReceiveThrowValue;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri($"/roomHub?roomKey={Storage.RoomKey}&roomId={RoomId}"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, DiceThrowConfiguration>("ReceiveRoll", ReceiveRoll);
        hubConnection.On<Guid, DieFinalConfigurationWrapper>("ReceiveDicePositions", ReceiveDicePositions);

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinRoom");

        await JSRuntime.InvokeVoidAsync("BlazingRollerLib.init", "diceCanvas");
    }

    public async Task Roll()
    {
        await RollCore(diceExpression);
    }

    [JSInvokable]
    public static void ReceiveThrowValueProxy(string id, int value, string config)
    {
        deliverThrowValueAction.Invoke(id, value, config);
    }

    private async Task RollCore(string expression)
    {
        var diceConfig = ParseInput(expression);

        if (diceConfig == null)
        {
            return;
        }

        var seed = new Random().Next();
        var config =
            new DiceThrowConfiguration
            {
                RandomSeed = seed,
                Offset = diceConfig.Constants.DefaultIfEmpty(0).Sum(),
                ThrowId = Guid.NewGuid(),
                ReturnFinalConfiguration = true,
                Dice = diceConfig.Dice.Select(_ =>
                    new DieThrowConfiguration
                    {
                        Id = _.Id,
                        Sides = (int)_.Die,
                        Multiplier = _.Multiplicity
                    }).ToList()
            };
        currentThrowId = config.ThrowId;

        throwLogs.Add(new DiceThrowLogModel { Id = config.ThrowId, Name = Storage.User, Text = config.ToString() });
        await JSRuntime.InvokeVoidAsync("ElementInterop.scrollToEnd", logContainer);

        Console.WriteLine($"Random seed passed to Unity: {seed}");

        await InvokeUnityRoll(config);
        await hubConnection.SendAsync("RollDice", Storage.User, config);
    }

    private async Task ReceiveRoll(string username, DiceThrowConfiguration config)
    {
        throwLogs.Add(new DiceThrowLogModel { Id = config.ThrowId,  Name = username, Text = config.ToString() });

        currentThrowId = config.ThrowId;
        config.ReturnFinalConfiguration = false;
        await InvokeUnityRoll(config);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("ElementInterop.scrollToEnd", logContainer);
    }

    private async Task ReceiveDicePositions(Guid throwId, DieFinalConfigurationWrapper config)
    {
        if (currentThrowId != throwId)
        {
            return;
        }

        Console.WriteLine("Repositioning dice");

        var json = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("engine.repositionDice", json);
    }

    private async Task InvokeUnityRoll(DiceThrowConfiguration config)
    {
        var json = JsonSerializer.Serialize(config, new JsonSerializerOptions { IgnoreNullValues = true });
        await JSRuntime.InvokeVoidAsync("engine.rollDice", json);
    }

    private DieParser.ParsingResult ParseInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return null;
        }

        try
        {
            var parsed = DieParser.Parse(input);

            return parsed;
        }
        catch (InvalidDataException ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
            return null;
        }
    }

    private async Task ReceiveThrowValue(string id, int value, string config)
    {
        var guid = Guid.Parse(id);
        var log = throwLogs.SingleOrDefault(_ => _.Id == guid);

        if (log is {})
        {
            log.Result = value;
        }

        if (!string.IsNullOrEmpty(config))
        {
            await hubConnection.SendAsync("RepositionDice", guid, JsonSerializer.Deserialize<DieFinalConfigurationWrapper>(config));
        }

        StateHasChanged();
    }

    private void LeaveRoom()
    {
        Storage.Clear();
        Navigator.NavigateTo("/create");
    }

    public void Dispose()
    {
        if (hubConnection is {})
        {
            _ = hubConnection.DisposeAsync();
        }
    }
}