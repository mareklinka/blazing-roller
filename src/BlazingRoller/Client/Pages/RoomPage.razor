@page "/room/{RoomId:guid}"

@using System.Text.Json
@using System.IO
@using BlazingRoller.Client.Models
@using Microsoft.Extensions.Logging
@using System.Reflection

@inject NavigationManager Navigator
@inject SessionStorageService Storage
@inject ILogger<RoomPage> Logger
@inject JsInteropService JsInterop
@inject RoomHubConnection RoomHub
@inject IModalService ModalService

@implements IDisposable

<div class="row">
    <div class="col-11 room-name">@Storage.Room <span class="leave-room-link">(<a href="#" @onclick:preventDefault @onclick="LeaveRoom">Leave room <i class="fas fa-sign-out-alt"></i></a>)</span></div>
    <div class="col-1"><small class="float-right text-muted">@applicationVersion</small></div>
</div>

<div class="row">
    <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12 webgl-column">
        <div class="webgl-content">
            <div id="unityContainer" style="width: 100%; min-width: 576px; height: 450px"></div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">
        <div class="row">
            <div class="col-6">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-dice-d20"></i></span>
                    </div>
                    <input type="text" @bind="diceExpression" class="form-control" autocomplete="" @bind:event="oninput" @onkeyup="DiceInputKeyUp" @onkeypress="DiceInputKeyPressed"/>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Roll">Roll!</button>
                        <button type="button" class="btn btn-outline-warning" @onclick="SelectDiceModel"><i class="fas fa-cogs"></i></button>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-success" @onclick='() => RollCore("1D20")'><i class="fas fa-dice-d20"></i></button>
                    <button type="button" class="btn btn-outline-success" @onclick='() => RollCore("2D20")'>2x <i class="fas fa-dice-d20"></i></button>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">

                <div class="dice-log-container" @ref="logContainer">
                    @foreach (var log in throwLogs)
                    {
                        <div class="dice-log">
                            <span class="dice-log-name">@(log.Name): </span>
                            <a href="#" @onclick:preventDefault class="dice-log-text" @onclick="() => RollCore(log.Text)">@log.Text</a>
                            @if (log.Result is {})
                            {
                                <span class="dice-log-value"> = @log.Result</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid RoomId { get; set; }

    private static Func<string, int, string, Task> receiveFinalThrowConfiguration;

    private ElementReference logContainer;
    private string diceExpression;
    private List<DiceThrowLogModel> throwLogs = new List<DiceThrowLogModel>();
    private LinkedList<string> myThrows = new LinkedList<string>();
    private Guid? currentThrowId;
    private int? historyPosition;
    private int currentDiceSet;
    private string applicationVersion;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Storage.User) || string.IsNullOrEmpty(Storage.Room))
        {
            Navigator.NavigateTo($"/create/{RoomId}");
            return;
        }

        applicationVersion = GetType().Assembly.GetName().Version.ToString();

        receiveFinalThrowConfiguration = ReceiveFinalThrowConfiguration;

        RoomHub.BuildConnection(RoomId.ToString(), Storage.RoomKey.ToString());

        RoomHub.OnReceiveRoll(ReceiveRoll);
        RoomHub.OnReceiveDicePositions(ReceiveDicePositions);

        await RoomHub.Connect();
        await RoomHub.JoinRoom();

        await JsInterop.InitializeWebGl("diceCanvas");
    }

    public async Task Roll()
    {
        await RollCore(diceExpression);
    }

    [JSInvokable]
    public static void ReceiveThrowValueProxy(string id, int value, string config)
    {
        receiveFinalThrowConfiguration.Invoke(id, value, config);
    }

    private async Task RollCore(string expression)
    {
        var diceConfig = ParseInput(expression);

        if (diceConfig == null || diceConfig.Dice.Count() > 15)
        {
            return;
        }

        UpdateThrowHistory(expression);

        var seed = new Random().Next();
        var config =
            new DiceThrowConfiguration
            {
                RandomSeed = seed,
                Offset = diceConfig.Constants.DefaultIfEmpty(0).Sum(),
                ThrowId = Guid.NewGuid(),
                DiceSet = currentDiceSet,
                ReturnFinalConfiguration = true,
                Dice = diceConfig.Dice.Select(_ =>
                    new DieThrowConfiguration
                    {
                        Id = _.Id,
                        Sides = (int)_.Die,
                        Multiplier = _.Multiplicity
                    }).ToList()
            };

        currentThrowId = config.ThrowId;

        throwLogs.Add(new DiceThrowLogModel { Id = config.ThrowId, Name = Storage.User, Text = config.ToString() });
        await JsInterop.ScrollElementToEnd(logContainer);

        await JsInterop.SendRollToUnity(config);
        await RoomHub.RollDice(Storage.User, config);
    }

    private void UpdateThrowHistory(string expression)
    {
        historyPosition = null;

        if (myThrows.Contains(expression))
        {
            if (myThrows.First.Value != expression)
            {
                myThrows.Remove(expression);
                myThrows.AddFirst(expression);
            }
        }
        else
        {
            if (myThrows.Count == 10)
            {
                // limit the items in history to 10
                myThrows.RemoveLast();
            }

            myThrows.AddFirst(expression);
        }
    }

    private async Task ReceiveRoll(string username, DiceThrowConfiguration config)
    {
        if (config.Dice.Count > 15)
        {
            return;
        }

        throwLogs.Add(new DiceThrowLogModel { Id = config.ThrowId,  Name = username, Text = config.ToString() });

        currentThrowId = config.ThrowId;
        config.ReturnFinalConfiguration = false;
        await JsInterop.SendRollToUnity(config);

        StateHasChanged();

        await JsInterop.ScrollElementToEnd(logContainer);
    }

    private async Task ReceiveDicePositions(Guid throwId, DieFinalConfigurationWrapper config)
    {
        if (currentThrowId != throwId)
        {
            return;
        }

        await JsInterop.RepositionDice(config);
    }

    private DieParser.ParsingResult ParseInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return null;
        }

        try
        {
            var parsed = DieParser.Parse(input);

            return parsed;
        }
        catch (InvalidDataException ex)
        {
            Logger.LogError($"ERROR: {ex.Message}");
            return null;
        }
    }

    private async Task ReceiveFinalThrowConfiguration(string id, int value, string config)
    {
        var guid = Guid.Parse(id);
        var log = throwLogs.SingleOrDefault(_ => _.Id == guid);

        if (log is {})
        {
            log.Result = value;
        }

        if (!string.IsNullOrEmpty(config))
        {
            await RoomHub.RepositionDice(guid, JsonSerializer.Deserialize<DieFinalConfigurationWrapper>(config));
        }

        StateHasChanged();
    }

    private async Task DiceInputKeyPressed(KeyboardEventArgs e)
    {
        if (string.Equals("enter", e.Code, StringComparison.OrdinalIgnoreCase))
        {
            await Roll();
        }
    }

    private void DiceInputKeyUp(KeyboardEventArgs e)
    {
        if (myThrows.Count == 0)
        {
            return;
        }

        if (string.Equals("arrowup", e.Code, StringComparison.OrdinalIgnoreCase))
        {
            if (historyPosition is null)
            {
                historyPosition = 0;
            }
            else
            {
                historyPosition = (historyPosition + 1) % myThrows.Count;
            }

            diceExpression = myThrows.ElementAt(historyPosition.Value);
        }

        if (string.Equals("arrowdown", e.Code, StringComparison.OrdinalIgnoreCase))
        {
            if (historyPosition is null)
            {
                historyPosition = myThrows.Count - 1;
            }
            else
            {
                historyPosition = (historyPosition - 1) % myThrows.Count + (historyPosition == 0 ? myThrows.Count : 0);
            }

            diceExpression = myThrows.ElementAt(historyPosition.Value);
        }
    }

    private void LeaveRoom()
    {
        Storage.Clear();
        Navigator.NavigateTo("/create");
    }

    private async Task SelectDiceModel()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(DiceSettingsModalComponent.CurrentDiceSet), currentDiceSet);

        var modal = ModalService.Show<DiceSettingsModalComponent>("Dice settings", modalParameters);
        var result = await modal.Result;

        if (result.Cancelled)
        {
            return;
        }

        currentDiceSet = (int)result.Data;
    }

    public void Dispose()
    {
        RoomHub.Dispose();
    }
}