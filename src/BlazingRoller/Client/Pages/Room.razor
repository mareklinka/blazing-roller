@page "/room/{RoomId:guid}"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using System.Text.Json
@using System.IO

@inject NavigationManager Navigator
@inject SessionStorageService Storage
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<h1>Welcome to thing or what</h1>
<div>Username: @Storage.User</div>
<div>Room: @Storage.Room</div>
<div>
    <input type="text" @bind="diceExpression" class="form-control"/>
</div>
<div>
    @parsedDice
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick="Roll">Roll!</button>
</div>
<hr />
<div class="webgl-content">
    <div id="unityContainer" style="width: 800px; height: 450px"></div>
    <div class="footer">
    <div class="webgl-logo"></div>
    <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
    <div class="title">DiceRoller</div>
    </div>
</div>

@code {
    [Parameter]
    public Guid RoomId { get; set; }

    private string diceExpression;

    private string parsedDice;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Storage.User) || string.IsNullOrEmpty(Storage.Room))
        {
            Navigator.NavigateTo("/login");
            return;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri($"/roomHub?roomKey={Storage.RoomKey}"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<DiceThrowConfiguration>("ReceiveRoll", async (config) =>
        {
            await InvokeUnityRoll(config);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinRoom");

        await JSRuntime.InvokeVoidAsync("BlazingRollerLib.init", "diceCanvas");
    }

    public async Task Roll()
    {
        var dice = ParseInput(diceExpression);

        var seed = new Random().Next();
        var config =
            new DiceThrowConfiguration
            {
                RandomSeed = seed,
                Dice = dice.Select(_ => new DieThrowConfiguration { Id = _.Id, Sides = (int)_.Die }).ToList()
            };

        Console.WriteLine($"Random seed passed to Unity: {seed}");

        await InvokeUnityRoll(config);
        await hubConnection.SendAsync("RollDice", config);
    }

    private async Task InvokeUnityRoll(DiceThrowConfiguration config)
    {
        var json = JsonSerializer.Serialize(config, new JsonSerializerOptions { IgnoreNullValues = true });
        await JSRuntime.InvokeVoidAsync("engine.rollDice", json);
    }

    private IReadOnlyCollection<DieParser.DieDefinition> ParseInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return new List<DieParser.DieDefinition>();
        }

        try
        {
            var parsed = DieParser.Parse(diceExpression);

            return parsed.Dice;
        }
        catch (InvalidDataException ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
            return new List<DieParser.DieDefinition>();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveRoom");
        await hubConnection.DisposeAsync();
    }
}